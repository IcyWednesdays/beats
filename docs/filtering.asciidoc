== Kibana queries vs filters

Filters and queries are using the same syntax but they are used for different
purposes. They are most powerful when they are used together to create
insightful dashboards.

Filters restrict the view of the whole dashboards. They constrain the data
displayed on the charts, tables and maps. The time selector from the top of the
web page, for example, is a filter. But you can filter on any field and also
combine multiple filters.

Queries are searches within the filtered transactions. For example, you can use
queries for doing a free text search among the transactions of a given type.

Kibana supports using multiple queries inside the same dashboard. Most widgets
use the defined dashboard queries to group the transactions into series. For
example, if you want to compare the response times of HTTP requests versus
PgSQL requests in the same chart, you would define a query for each of them.

=== Filters

You can use the *Filtering* menu to filter the whole dashboard by specific
field. To do this, use field name followed by a colon ":" and the term you are
looking for.

image:./images/kibana-filters.png[Kibana filters]

To only view HTTP transactions:

[source,shell]
--------------------
type: http
-------------------


To only view failed transactions:

[source,shell]
-------------------
status: Error
-------------------


To only view MySQL INSERT queries:

[source,shell]
---------------------
mysql.method: INSERT
---------------------


==== Regexp filters

Kibana supports regular expression for filters and expressions.  For example,
to search for all http responses with json as returned value type: 

[source,shell]
-------------------------
http.content_type: *json
-------------------------


See
http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-regexp-query.html[Elasticsearch regexp query]
for more details about the syntax.


==== Range filters

Range filters allow a field to have values between the lower and upper bound.
The interval can include or exclude the bounds depending on the type of
brackets used.

To search for slow transactions with a responsetime greater or equal than 10ms:

[source,shell]
------------------------
responsetime: [10 TO *]
------------------------


To search for slow transactions with a responsetime greater than 10ms:

[source,shell]
-------------------------
responsetime: {10 TO *}
-------------------------


==== Filters from the search results

Another useful trick for using filters without having to memorize their syntax
is to use the contextual view from the transaction detailed view.

image:./images/filter_from_context.png[Filter from context]

You can add a filter to match the current value or a filter to NOT match the
current value.

=== Queries

image:./images/kibana-query-filtering.png[Kibana query]

A query may consists of one or more words or a phrase. A phrase is a
group of words surrounded by double quotes such as "test search".

To search for all http requests initiated by Mozilla Web browser version 5.0:

[source,shell]
---------------
"Mozilla/5.0"
--------------


To search for all the transactions that contain the following message:

[source,shell]
------------------------------------
"Cannot change the info of a user"
------------------------------------


**Note** that the double quotes are mandatory here to search for the exact
string. Without any quotes, the search would match "Cannot" OR "change" OR
"the" OR "info" OR "a" OR "user".

image:./images/kibana-query-phrase.png[Kibana query phrase]

To search for all transactions with the "chunked" encoding:

[source,shell]
-----------------------------
"Transfer-Encoding: chunked"
-----------------------------


==== Boolean operators

Boolean operators (AND, OR, NOT) allow combining multiple sub queries through logic operators.
**Note** that operators such as AND, OR and NOT must be CAPITALIZED. See http://lucene.apache.org/core/3_5_0/queryparsersyntax.html[Lucene query syntax] for more details about the boolean operators.

To search for all transactions except MySQL transactions:

[source,shell]
----------------
NOT type: mysql
---------------


To search for all MySQL SELECT queries with large attachments:

[source,shell]
-------------------------------------------------
mysql.method: SELECT AND mysql.size: [10000 TO *]
-------------------------------------------------


Lucene also supports parentheses to group sub queries.

To search for either INSERT or UPDATE MySQL queries with a responsetime greater or equal with 30ms:

[source,shell]
---------------------------------------------------------------------------
(mysql.method: INSERT OR mysql.method: UPDATE) AND responsetime: [30 TO *]
---------------------------------------------------------------------------


