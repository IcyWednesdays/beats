[[new-beat]]
== Developer guide: creating a new Beat

This guide walks you through the steps for creating a new Elastic Beat.  The
Beats are a collection of lightweight daemons that collect operational data from
your servers and ship it to Elasticsearch or Logstash.  The common parts from
all Beats are placed in the libbeat library, which contains packages for sending
data to Elasticsearch and Logstash, for configuration file handling, for signal
handling, for logging and more. By using this common framework, we can ensure
that all Beats are behaving the same and that they are easy to package and run
with common tools.

=== Getting ready

Libbeat and all Beats are written in http://golang.org/[Go], so having it
installed and knowing its basics is a prerequisite for understanding this guide.
However, don't worry if you are not yet a Go expert, it is a sufficiently new
language that very few people can consider themselves experts.  In fact, several
people learned Go by contributing to Packetbeat & libbeat, including the
original Packetbeat authors.

To exemplify this guide with a working example, we will follow the
https://github.com/elastic/topbeat[Topbeat] source code. Topbeat is similar to
the `top` command line tool but instead of printing the statistics to the screen
it periodically ships them to Elasticsearch for storage.

After having https://golang.org/doc/install[installed Go] and setup the
https://golang.org/doc/code.html#GOPATH[GOPATH] environment variable to point to
your preferred workspace location, a simple way of getting the source code for
Topbeat and libbeat and compiling them at the same time is to do:

[source,shell]
----------------------------------------------------------------------
go get github.com/elastic/topbeat
----------------------------------------------------------------------

=== Overview

At the high level, a simple Beat like Topbeat has two main components: one that
collects the actual data and the publisher. The publisher is implemented in
libbeat, so you typically only have to worry about the logic specific to your
Beat. Besides the publisher, libbeat offers common services like configuration
management, logging, daemonizing/Windows service handling and in the future it
will offer data processing modules like filtering or sampling.

image:./images/beat_overview.png[Beat overview architecture]

An event is a JSON like object (Golang type `map[string]interface{}`) that
contains the collected data which is indexed into Elasticsearch. The only
rules are that it must contain a `timestamp` field and a `type` field. Beyond
that, these events can contain anything and they can be created as often as
necessary.

[source,json]
----------------------------------------------------------------------
{
  count":1,
  "proc.cpu":{
    "user":20,
    "percent":0.983284169124877,
    "system":0,
    "total":20,
    "start_time":"20:20"
  },
  "proc.mem":{
    "size":333772,
    "rss":6316,
    "share":2996
  },
  "proc.name":"topbeat",
  "proc.pid":13954,
  "proc.ppid":10027,
  "proc.state":"sleeping",
  "shipper":"vagrant-ubuntu-trusty-64",
  "timestamp":"2015-08-06T20:20:34.089Z",
  "type":"proc"
}
----------------------------------------------------------------------

Now that you have the big picture, let's dig into the code.

=== Beat specific code

The Beat specific code should implement the `Beater` interface which is found in
libbeat. This means your Beat should implement 5 methods:

[source,go]
----------------------------------------------------------------------
type Beater interface {
	Config(*Beat) error
	Setup(*Beat) error
	Run(*Beat) error
	Cleanup(*Beat) error
	Stop()
}
----------------------------------------------------------------------

The `Beat` parameter received by most of these methods contains data about the
Beat, things like the name, version and common configuration options.

Let's go through each of these methods and look at a sample implementation.


=== Configuration

The `Config` method deals with the configuration file and optionally with
custom CLI flags.

The recommended way of handling the configuration is to create a
`ConfigSettings` type that matches the structure of the expected configuration
file. Here is an example configuration section for Topbeat:

[source,yaml]
----------------------------------------------------------------------
input:
  period: 1

  procs: [".*"]
----------------------------------------------------------------------

And here are the corresponding Go structures, found in `config.go`:

[source,go]
----------------------------------------------------------------------
type TopConfig struct {
	Period *int64
	Procs  *[]string
}

type ConfigSettings struct {
	Input TopConfig
}
----------------------------------------------------------------------

Pointers are used to distinguish between when the setting is completely
missing from the configuration file and when it has a value that matches the
type's default value.

With these structures defined, the `Config` function looks like this:


[source,go]
----------------------------------------------------------------------
func (tb *Topbeat) Config(b *beat.Beat) error {

	err := cfgfile.Read(&tb.TbConfig, "") <1>
	if err != nil {
		logp.Err("Error reading configuration file: %v", err)
		return err
	}

	if tb.TbConfig.Input.Period != nil { <2>
		tb.period = time.Duration(*tb.TbConfig.Input.Period) * time.Second
	} else {
		tb.period = 1 * time.Second
	}

	[...]

	return nil
}
----------------------------------------------------------------------

<1> Read the configuration.
<2> Set default values for options that are not present in the configuration
    file.

==== Setup

The `Setup` method gives you the opportunity to execute things before the main
loop, usually for initialization. In the case of Topbeat, it only assigns the
Beat object to the Topbeat object, so it doesn't have to be passed to all sub
functions.

[source,go]
----------------------------------------------------------------------
func (tb *Topbeat) Setup(b *beat.Beat) error {

	tb.Beat = b
	return nil
}
----------------------------------------------------------------------

==== Run

The `Run` method should contain your main application loop. For Topbeat it looks
like this:

[source,go]
----------------------------------------------------------------------
func (t *Topbeat) Run(b *beat.Beat) error {

	t.isAlive = true

	t.initProcStats()

	var err error

	for t.isAlive {
		time.Sleep(t.period)

		err = t.exportSystemStats()
		if err != nil {
			logp.Err("Error reading system stats: %v", err)
		}
		[...]
	}

	return err
}
----------------------------------------------------------------------

Inside the loop, Topbeat sleeps for a configurable period of time and then
captures the required data and sends it to the publisher via the `events`
publisher client. The publisher client is available as part of the Beat object
through the `Beat.Events` variable.

The actual sending is done inside the `exportSystemStats()`:

[source,go]
----------------------------------------------------------------------

func (t *Topbeat) exportSystemStats() error {

	load_stat, err := GetSystemLoad()
	if err != nil {
		logp.Warn("Getting load statistics: %v", err)
		return err
	}

	[...]

	event := common.MapStr{ <1>
		"timestamp": common.Time(time.Now()), <2>
		"type":      "system",
		"load":      load_stat,
		"cpu":       cpu_stat,
		"mem":       mem_stat,
		"swap":      swap_stat,
	}

	t.Beat.Events.PublishEvent(event) <3>

	return nil
}
----------------------------------------------------------------------

<1> Creating the event object.
<2> The `timestamp` field needs to be of time `common.Time`.
<3> Sending the event.

==== Cleanup

The `Cleanup` method is executed after the main loop finishes or is interrupted
and gives you the opportunity to release any resources you might use. For
Topbeat, it is completely empty:

[source,go]
----------------------------------------------------------------------
func (tb *Topbeat) Cleanup(b *beat.Beat) error {
	return nil
}
----------------------------------------------------------------------

==== Stop

Finally, the `Stop` method is called when the Beat is signalled to stop, for
example via the SIGTERM signal on Unix systems or via the service control
interface on Windows. In the case of Topbeat, it simply sets `isAlive` to
`false` which breaks the main loop.

[source,go]
----------------------------------------------------------------------
func (t *Topbeat) Stop() {
	t.isAlive = false
}
----------------------------------------------------------------------

=== The main function

If you follow the Topbeat model and put your Beat specific code in its own type
that implements the `Beater` interface, the code from your main package becomes
very simple:

[source,go]
----------------------------------------------------------------------
func main() {

	tb := &Topbeat{}

	b := beat.NewBeat(Name, Version, tb)

	b.CommandLineSetup()

	b.LoadConfig()

	tb.Config(b)

	b.Run()

}
----------------------------------------------------------------------

